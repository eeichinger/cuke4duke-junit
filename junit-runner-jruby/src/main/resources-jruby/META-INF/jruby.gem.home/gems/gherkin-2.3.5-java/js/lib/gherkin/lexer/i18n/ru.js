
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */
;(function() {


/* line 107 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */



/* line 11 "js/lib/gherkin/lexer/i18n/ru.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 12, 23, 24, 25, 27, 38, 
	39, 40, 44, 49, 54, 59, 64, 68, 
	72, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 94, 101, 106, 110, 116, 119, 121, 
	127, 138, 139, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 187, 189, 192, 194, 196, 
	198, 200, 202, 204, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 274, 275, 276, 277, 
	278, 279, 280, 281, 282, 283, 284, 285, 
	286, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 304, 315, 317, 319, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 356, 
	358, 360, 362, 364, 366, 369, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 525, 528, 530, 532, 534, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	601, 602, 603, 604, 605, 606, 607, 609, 
	610, 611, 612, 613, 614, 615, 616, 617, 
	618, 619, 620, 621, 622, 623, 624, 625, 
	626, 627, 628, 629, 630, 631, 632, 633, 
	634, 635, 636, 637, 638, 639, 640, 641, 
	642, 643, 652, 663, 665, 667, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 712, 714, 717, 719, 721, 
	723, 725, 727, 729, 731, 733, 735, 737, 
	739, 741, 743, 745, 747, 749, 751, 753, 
	755, 757, 759, 761, 763, 765, 767, 769, 
	771, 773, 775, 777, 779, 781, 783, 785, 
	787, 789, 791, 793, 795, 797, 799, 801, 
	803, 805, 807, 810, 813, 815, 817, 819, 
	821, 823, 825, 827, 829, 831, 833, 835, 
	837, 839, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 886, 887, 888, 889, 890, 891, 892, 
	893, 894, 895, 896, 897, 898, 899, 900, 
	909, 920, 922, 924, 927, 929, 931, 933, 
	935, 937, 939, 941, 943, 945, 947, 949, 
	951, 953, 955, 957, 959, 961, 963, 965, 
	967, 969, 971, 974, 976, 978, 980, 982, 
	984, 986, 988, 990, 992, 994, 996, 998, 
	1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 
	1016, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 
	1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 
	1065, 1067, 1069, 1071, 1074, 1076, 1078, 1080, 
	1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 
	1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 
	1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 
	1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 
	1146, 1148, 1150, 1152, 1155, 1158, 1160, 1162, 
	1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 
	1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 
	1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 
	1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 
	1228, 1230, 1231, 1232, 1234, 1236, 1237, 1238, 
	1239, 1240, 1241, 1242, 1243, 1244, 1252, 1257, 
	1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 
	1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 
	1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 
	1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 
	1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 
	1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 
	1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 
	1372, 1374, 1376, 1378, 1380, 1382, 1384, 1386, 
	1388, 1390, 1392, 1394, 1396, 1398, 1401, 1403, 
	1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 
	1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 
	1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 
	1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 
	1469, 1471, 1473, 1474, 1475, 1476, 1477, 1478, 
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 
	1487, 1488, 1489, 1490, 1491, 1492
];

const _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -112, -108, -107, -105, 
	-104, -102, -99, -97, -95, -94, -92, 32, 
	10, 10, 13, -48, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, 34, 34, 
	10, 32, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -48, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -48, -80, -66, -48, -67, -48, 
	-66, -48, -65, -47, -125, -47, -127, -47, 
	-126, -48, -72, -48, -68, -47, -127, -48, 
	-69, -48, -72, -48, -67, -48, -80, -47, 
	-121, -48, -75, -48, -67, -48, -72, -47, 
	-113, 58, 10, 10, -48, 10, 32, 35, 
	124, 9, 13, -92, 10, -48, -47, 10, 
	-72, 10, -47, 10, -121, 10, -48, 10, 
	-80, 10, 10, 58, -48, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, -125, 
	10, -48, 10, -67, 10, -48, 10, -70, 
	10, -47, 10, -122, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -48, 10, -69, 
	10, -48, 32, -66, -48, -77, -48, -76, 
	-48, -80, -47, -126, -48, -66, -48, -68, 
	-47, -125, 32, -48, -74, -48, -75, -47, 
	-128, -125, -48, -75, -48, -76, -47, -117, 
	-47, -127, -47, -126, -48, -66, -47, -128, 
	-48, -72, -47, -113, 58, 10, 10, -48, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-112, -108, -107, -104, -102, -99, -97, -95, 
	-94, -92, 10, 10, 32, -48, 10, -80, 
	-66, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -48, 10, -65, 10, -47, 10, 
	-125, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -47, 10, -127, 10, -48, 10, 
	-69, 10, -48, 10, -72, 10, -48, 10, 
	32, -66, 10, -48, 10, -77, 10, -48, 
	10, -76, 10, -48, 10, -80, 10, -47, 
	10, -126, 10, -48, 10, -66, 10, -48, 
	10, -68, 10, -47, 10, -125, 10, 10, 
	32, -48, 10, -74, 10, -48, 10, -75, 
	10, -47, 10, -125, 10, -47, 10, -127, 
	10, -47, 10, -126, 10, -47, 10, -116, 
	10, -47, 10, -126, -122, 10, -47, 10, 
	-128, 10, -47, 10, -125, 10, -48, 10, 
	-70, 10, -47, 10, -126, 10, -47, 10, 
	-125, 10, -47, 10, -128, 10, -48, 10, 
	-80, 10, 10, 32, -47, 10, -127, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-47, 10, -113, 10, 10, 58, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -48, 10, -71, 10, -48, 10, 
	-66, 10, -48, 10, 32, -48, -47, 10, 
	-72, 10, -47, 10, -121, 10, -48, 10, 
	-80, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-47, -127, -47, -126, -47, -116, -47, -126, 
	-122, -47, -128, -47, -125, -48, -70, -47, 
	-126, -47, -125, -47, -128, -48, -80, 32, 
	-47, -127, -47, -122, -48, -75, -48, -67, 
	-48, -80, -47, -128, -48, -72, -47, -113, 
	58, 10, 10, -48, 10, 32, 35, 37, 
	42, 64, 9, 13, -112, -108, -107, -104, 
	-102, -99, -97, -95, -94, -92, 10, 10, 
	32, -48, 10, -80, -66, 10, -48, 10, 
	-67, 10, -48, 10, -66, 10, -48, 10, 
	-65, 10, -47, 10, -125, 10, -47, 10, 
	-127, 10, -47, 10, -126, 10, -48, 10, 
	-72, 10, -48, 10, -68, 10, -47, 10, 
	-127, 10, -48, 10, -69, 10, -48, 10, 
	-72, 10, -48, 10, 32, -66, 10, -48, 
	10, -77, 10, -48, 10, -76, 10, -48, 
	10, -80, 10, -47, 10, -126, 10, -48, 
	10, -66, 10, -48, 10, -68, 10, -47, 
	10, -125, 10, 10, 32, -48, 10, -74, 
	10, -48, 10, -75, 10, -47, 10, -125, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, -47, 10, -116, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -71, 
	10, 10, 58, -48, 10, -66, 10, -48, 
	10, 32, -48, -47, 10, -72, 10, -47, 
	10, -121, 10, -48, 10, -80, 10, -125, 
	10, -48, 10, -67, 10, -48, 10, -70, 
	10, -47, 10, -122, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -48, 10, -69, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -48, -75, -48, 
	-67, -48, -80, -47, -128, -48, -72, -48, 
	-71, 58, 10, 10, -48, 10, 32, 35, 
	37, 42, 64, 9, 13, -112, -108, -107, 
	-104, -102, -99, -97, -95, -94, -92, 10, 
	10, 32, -48, 10, -80, -66, 10, -48, 
	10, -67, 10, -48, 10, -66, 10, -48, 
	10, -65, 10, -47, 10, -125, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -48, 
	10, -72, 10, -48, 10, -68, 10, -47, 
	10, -127, 10, -48, 10, -69, 10, -48, 
	10, -72, 10, -48, 10, 32, -66, 10, 
	-48, 10, -77, 10, -48, 10, -76, 10, 
	-48, 10, -80, 10, -47, 10, -126, 10, 
	-48, 10, -66, 10, -48, 10, -68, 10, 
	-47, 10, -125, 10, 10, 32, -48, 10, 
	-74, 10, -48, 10, -75, 10, -47, 10, 
	-128, -125, 10, -48, 10, -75, 10, -48, 
	10, -76, 10, -47, 10, -117, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -48, 
	10, -66, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -47, 10, -113, 10, 10, 
	58, -47, 10, -127, 10, -47, 10, -126, 
	10, -47, 10, -116, 10, -47, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -71, 10, -48, 10, -66, 10, 
	-48, 10, 32, -48, -47, 10, -72, 10, 
	-47, 10, -121, 10, -48, 10, -80, 10, 
	-125, 10, -48, 10, -67, 10, -48, 10, 
	-70, 10, -47, 10, -122, 10, -48, 10, 
	-72, 10, -48, 10, -66, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-69, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -48, -66, 
	-48, 32, -48, -47, -72, -47, -121, -48, 
	-80, 58, 10, 10, -48, 10, 32, 35, 
	37, 64, 9, 13, -105, -97, -95, -92, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -121, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -72, 
	10, -47, 10, -113, 10, 10, 58, -47, 
	10, -128, 10, -48, 10, -75, 10, -48, 
	10, -76, 10, -47, 10, -117, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -48, 
	10, -66, 10, -47, 10, -128, 10, -47, 
	10, -126, -122, 10, -47, 10, -128, 10, 
	-47, 10, -125, 10, -48, 10, -70, 10, 
	-47, 10, -126, 10, -47, 10, -125, 10, 
	-47, 10, -128, 10, -48, 10, -80, 10, 
	10, 32, -47, 10, -127, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -48, 10, -71, 10, -48, -47, 
	10, -72, 10, -47, 10, -121, 10, -48, 
	10, -80, 10, -125, 10, -48, 10, -67, 
	10, -48, 10, -70, 10, -47, 10, -122, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -48, 10, -69, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -125, -48, -67, -48, -70, -47, -122, 
	-48, -72, -48, -66, -48, -67, -48, -80, 
	-48, -69, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 10, 11, 1, 1, 2, 9, 1, 
	1, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	9, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 3, 2, 2, 2, 
	2, 2, 2, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 11, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 11, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	11, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 6, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 12, 24, 26, 28, 31, 42, 
	44, 46, 50, 55, 60, 65, 70, 74, 
	78, 81, 83, 85, 87, 89, 91, 93, 
	95, 97, 99, 101, 103, 105, 107, 109, 
	111, 116, 123, 128, 132, 138, 142, 145, 
	151, 162, 164, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 215, 217, 219, 221, 223, 
	225, 227, 229, 231, 233, 235, 237, 239, 
	241, 243, 245, 252, 255, 259, 262, 265, 
	268, 271, 274, 277, 288, 291, 294, 297, 
	300, 303, 306, 309, 312, 315, 318, 321, 
	324, 327, 330, 333, 336, 339, 342, 344, 
	346, 348, 350, 352, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 387, 389, 391, 393, 
	395, 397, 399, 401, 403, 405, 407, 409, 
	411, 413, 415, 417, 419, 421, 423, 425, 
	427, 429, 438, 450, 453, 456, 460, 463, 
	466, 469, 472, 475, 478, 481, 484, 487, 
	490, 493, 496, 499, 502, 505, 508, 511, 
	514, 517, 520, 523, 526, 530, 533, 536, 
	539, 542, 545, 548, 551, 554, 557, 560, 
	563, 566, 569, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 621, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 738, 741, 744, 747, 750, 753, 
	756, 759, 763, 767, 770, 773, 776, 779, 
	782, 785, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 833, 836, 839, 842, 845, 848, 851, 
	854, 857, 860, 863, 866, 869, 872, 875, 
	877, 879, 881, 883, 885, 887, 889, 892, 
	894, 896, 898, 900, 902, 904, 906, 908, 
	910, 912, 914, 916, 918, 920, 922, 924, 
	926, 928, 930, 932, 934, 936, 938, 940, 
	942, 944, 946, 948, 950, 952, 954, 956, 
	958, 960, 969, 981, 984, 987, 991, 994, 
	997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 
	1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 
	1045, 1048, 1051, 1054, 1057, 1061, 1064, 1067, 
	1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091, 
	1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115, 
	1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139, 
	1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 
	1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 
	1190, 1193, 1196, 1200, 1204, 1207, 1210, 1213, 
	1216, 1219, 1222, 1225, 1228, 1231, 1234, 1237, 
	1240, 1243, 1246, 1249, 1252, 1255, 1258, 1261, 
	1264, 1267, 1270, 1273, 1276, 1279, 1282, 1285, 
	1288, 1291, 1294, 1297, 1300, 1303, 1306, 1309, 
	1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 
	1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 
	1351, 1363, 1366, 1369, 1373, 1376, 1379, 1382, 
	1385, 1388, 1391, 1394, 1397, 1400, 1403, 1406, 
	1409, 1412, 1415, 1418, 1421, 1424, 1427, 1430, 
	1433, 1436, 1439, 1443, 1446, 1449, 1452, 1455, 
	1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 
	1506, 1510, 1513, 1516, 1519, 1522, 1525, 1528, 
	1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552, 
	1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 
	1579, 1582, 1585, 1588, 1592, 1595, 1598, 1601, 
	1604, 1607, 1610, 1613, 1616, 1619, 1622, 1625, 
	1628, 1631, 1634, 1637, 1640, 1643, 1646, 1649, 
	1652, 1655, 1658, 1661, 1664, 1667, 1670, 1673, 
	1676, 1679, 1682, 1685, 1688, 1691, 1694, 1697, 
	1700, 1703, 1706, 1709, 1713, 1717, 1720, 1723, 
	1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 
	1750, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 
	1774, 1777, 1780, 1783, 1786, 1789, 1792, 1795, 
	1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 
	1822, 1825, 1827, 1829, 1832, 1835, 1837, 1839, 
	1841, 1843, 1845, 1847, 1849, 1851, 1859, 1865, 
	1868, 1871, 1874, 1877, 1880, 1883, 1886, 1889, 
	1892, 1895, 1898, 1901, 1904, 1907, 1910, 1913, 
	1916, 1919, 1922, 1925, 1928, 1931, 1934, 1937, 
	1940, 1943, 1946, 1949, 1952, 1955, 1958, 1961, 
	1965, 1968, 1971, 1974, 1977, 1980, 1983, 1986, 
	1989, 1992, 1995, 1998, 2001, 2004, 2007, 2010, 
	2013, 2016, 2019, 2022, 2025, 2028, 2031, 2034, 
	2037, 2040, 2043, 2046, 2049, 2052, 2055, 2058, 
	2061, 2064, 2067, 2070, 2073, 2076, 2080, 2083, 
	2086, 2089, 2092, 2095, 2098, 2101, 2104, 2107, 
	2110, 2113, 2116, 2119, 2122, 2125, 2128, 2131, 
	2134, 2137, 2140, 2143, 2146, 2149, 2152, 2155, 
	2158, 2161, 2164, 2167, 2170, 2173, 2176, 2179, 
	2182, 2185, 2188, 2190, 2192, 2194, 2196, 2198, 
	2200, 2202, 2204, 2206, 2208, 2210, 2212, 2214, 
	2216, 2218, 2220, 2222, 2224, 2226
];

const _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	11, 15, 16, 17, 18, 19, 20, 0, 
	21, 0, 0, 22, 24, 25, 23, 1, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	2, 0, 26, 0, 27, 0, 28, 27, 
	27, 0, 31, 30, 32, 30, 29, 35, 
	34, 36, 34, 33, 35, 34, 37, 34, 
	33, 35, 34, 38, 34, 33, 40, 39, 
	39, 0, 3, 41, 41, 0, 43, 44, 
	42, 3, 0, 45, 0, 46, 0, 47, 
	0, 48, 0, 49, 0, 50, 0, 51, 
	0, 52, 0, 53, 0, 54, 0, 55, 
	0, 56, 0, 57, 0, 58, 0, 0, 
	0, 0, 0, 59, 60, 61, 60, 60, 
	63, 62, 59, 3, 64, 8, 64, 0, 
	65, 66, 65, 0, 69, 68, 70, 71, 
	68, 67, 0, 73, 74, 72, 0, 73, 
	72, 69, 75, 73, 74, 75, 72, 76, 
	69, 77, 78, 79, 80, 81, 82, 83, 
	77, 0, 84, 0, 85, 86, 0, 87, 
	0, 16, 0, 88, 0, 11, 0, 89, 
	0, 90, 0, 91, 0, 92, 0, 93, 
	0, 94, 0, 95, 0, 96, 0, 97, 
	0, 98, 0, 99, 0, 11, 0, 100, 
	0, 101, 0, 102, 0, 103, 0, 104, 
	0, 11, 0, 105, 0, 106, 0, 107, 
	0, 108, 0, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 115, 
	0, 116, 0, 117, 0, 118, 0, 119, 
	0, 121, 120, 123, 122, 124, 123, 125, 
	126, 126, 125, 122, 127, 123, 122, 128, 
	129, 123, 122, 130, 123, 122, 131, 123, 
	122, 132, 123, 122, 133, 123, 122, 134, 
	123, 122, 123, 135, 122, 136, 138, 137, 
	139, 140, 141, 142, 143, 144, 137, 0, 
	145, 123, 122, 146, 123, 122, 147, 123, 
	122, 148, 123, 122, 149, 123, 122, 150, 
	123, 122, 151, 123, 122, 152, 123, 122, 
	153, 123, 122, 154, 123, 122, 155, 123, 
	122, 156, 123, 122, 157, 123, 122, 158, 
	123, 122, 159, 123, 122, 160, 123, 122, 
	134, 123, 122, 161, 162, 0, 163, 0, 
	164, 0, 165, 0, 166, 0, 167, 0, 
	168, 0, 11, 0, 169, 0, 170, 0, 
	171, 0, 172, 0, 173, 0, 174, 0, 
	175, 0, 176, 0, 177, 0, 178, 0, 
	179, 0, 180, 0, 11, 0, 181, 0, 
	182, 183, 0, 184, 0, 185, 0, 186, 
	0, 187, 0, 188, 0, 189, 0, 190, 
	0, 191, 0, 192, 0, 193, 0, 194, 
	0, 195, 0, 196, 0, 197, 0, 198, 
	0, 199, 0, 200, 0, 201, 0, 202, 
	0, 204, 203, 206, 205, 207, 206, 208, 
	209, 210, 211, 209, 208, 205, 212, 213, 
	214, 212, 215, 216, 217, 218, 219, 220, 
	206, 205, 206, 221, 205, 222, 206, 205, 
	223, 224, 206, 205, 225, 206, 205, 216, 
	206, 205, 226, 206, 205, 212, 206, 205, 
	227, 206, 205, 228, 206, 205, 229, 206, 
	205, 230, 206, 205, 231, 206, 205, 232, 
	206, 205, 233, 206, 205, 234, 206, 205, 
	235, 206, 205, 236, 206, 205, 237, 206, 
	205, 212, 206, 205, 238, 206, 205, 239, 
	206, 205, 240, 206, 205, 241, 206, 205, 
	242, 206, 205, 212, 206, 205, 243, 206, 
	244, 205, 245, 206, 205, 246, 206, 205, 
	247, 206, 205, 248, 206, 205, 249, 206, 
	205, 250, 206, 205, 212, 206, 205, 251, 
	206, 205, 252, 206, 205, 253, 206, 205, 
	254, 206, 205, 255, 206, 205, 256, 206, 
	205, 257, 206, 205, 258, 206, 205, 206, 
	259, 205, 260, 206, 205, 261, 206, 205, 
	262, 206, 205, 212, 206, 205, 263, 206, 
	205, 264, 206, 205, 265, 206, 205, 266, 
	206, 205, 267, 206, 205, 268, 206, 205, 
	269, 206, 205, 212, 206, 205, 270, 206, 
	205, 271, 272, 206, 205, 273, 206, 205, 
	274, 206, 205, 275, 206, 205, 276, 206, 
	205, 277, 206, 205, 278, 206, 205, 279, 
	206, 205, 280, 206, 205, 281, 206, 205, 
	282, 206, 205, 283, 206, 205, 284, 206, 
	205, 285, 206, 205, 286, 206, 205, 206, 
	287, 205, 288, 206, 205, 289, 206, 205, 
	290, 206, 205, 291, 206, 205, 292, 206, 
	205, 293, 206, 205, 294, 206, 205, 295, 
	206, 205, 296, 206, 205, 297, 206, 205, 
	298, 206, 205, 299, 206, 205, 300, 206, 
	205, 301, 206, 205, 302, 206, 205, 303, 
	206, 205, 206, 221, 205, 304, 206, 205, 
	305, 206, 205, 306, 206, 205, 307, 206, 
	205, 308, 206, 205, 309, 206, 205, 310, 
	206, 205, 311, 206, 205, 312, 206, 205, 
	313, 206, 205, 314, 206, 205, 303, 206, 
	205, 315, 206, 205, 316, 206, 205, 246, 
	206, 221, 205, 317, 318, 206, 205, 319, 
	206, 205, 320, 206, 205, 321, 206, 205, 
	322, 206, 205, 303, 206, 205, 323, 206, 
	205, 324, 206, 205, 325, 206, 205, 326, 
	206, 205, 327, 206, 205, 328, 206, 205, 
	329, 206, 205, 330, 206, 205, 331, 206, 
	205, 332, 206, 205, 333, 206, 205, 334, 
	206, 205, 335, 206, 205, 336, 206, 205, 
	337, 206, 205, 338, 206, 205, 303, 206, 
	205, 206, 339, 205, 206, 340, 205, 206, 
	341, 205, 206, 342, 205, 206, 343, 205, 
	206, 344, 205, 206, 345, 205, 206, 346, 
	205, 206, 347, 205, 206, 348, 205, 206, 
	349, 205, 206, 350, 205, 206, 351, 205, 
	206, 352, 205, 353, 0, 354, 0, 355, 
	0, 356, 0, 357, 0, 11, 0, 358, 
	0, 359, 360, 0, 361, 0, 362, 0, 
	363, 0, 364, 0, 365, 0, 366, 0, 
	367, 0, 368, 0, 369, 0, 370, 0, 
	371, 0, 372, 0, 373, 0, 374, 0, 
	375, 0, 376, 0, 377, 0, 378, 0, 
	379, 0, 380, 0, 381, 0, 382, 0, 
	383, 0, 384, 0, 385, 0, 386, 0, 
	387, 0, 388, 0, 389, 0, 390, 0, 
	391, 0, 392, 0, 394, 393, 396, 395, 
	397, 396, 398, 399, 400, 401, 399, 398, 
	395, 402, 403, 404, 402, 405, 406, 407, 
	408, 409, 410, 396, 395, 396, 411, 395, 
	412, 396, 395, 413, 414, 396, 395, 415, 
	396, 395, 406, 396, 395, 416, 396, 395, 
	402, 396, 395, 417, 396, 395, 418, 396, 
	395, 419, 396, 395, 420, 396, 395, 421, 
	396, 395, 422, 396, 395, 423, 396, 395, 
	424, 396, 395, 425, 396, 395, 426, 396, 
	395, 427, 396, 395, 402, 396, 395, 428, 
	396, 395, 429, 396, 395, 430, 396, 395, 
	431, 396, 395, 432, 396, 395, 402, 396, 
	395, 433, 396, 434, 395, 435, 396, 395, 
	436, 396, 395, 437, 396, 395, 438, 396, 
	395, 439, 396, 395, 440, 396, 395, 402, 
	396, 395, 441, 396, 395, 442, 396, 395, 
	443, 396, 395, 444, 396, 395, 445, 396, 
	395, 446, 396, 395, 447, 396, 395, 448, 
	396, 395, 396, 449, 395, 450, 396, 395, 
	451, 396, 395, 452, 396, 395, 402, 396, 
	395, 453, 396, 395, 454, 396, 395, 455, 
	396, 395, 456, 396, 395, 457, 396, 395, 
	458, 396, 395, 459, 396, 395, 402, 396, 
	395, 460, 396, 395, 461, 396, 395, 462, 
	396, 395, 463, 396, 395, 464, 396, 395, 
	465, 396, 395, 466, 396, 395, 467, 396, 
	395, 468, 396, 395, 469, 396, 395, 470, 
	396, 395, 471, 396, 395, 472, 396, 395, 
	473, 396, 395, 396, 411, 395, 474, 396, 
	395, 475, 396, 395, 436, 396, 411, 395, 
	476, 477, 396, 395, 478, 396, 395, 479, 
	396, 395, 480, 396, 395, 481, 396, 395, 
	473, 396, 395, 482, 396, 395, 483, 396, 
	395, 484, 396, 395, 485, 396, 395, 486, 
	396, 395, 487, 396, 395, 488, 396, 395, 
	489, 396, 395, 490, 396, 395, 491, 396, 
	395, 492, 396, 395, 493, 396, 395, 494, 
	396, 395, 495, 396, 395, 496, 396, 395, 
	497, 396, 395, 473, 396, 395, 396, 498, 
	395, 396, 499, 395, 396, 500, 395, 396, 
	501, 395, 396, 502, 395, 396, 503, 395, 
	396, 504, 395, 396, 505, 395, 396, 506, 
	395, 396, 507, 395, 396, 508, 395, 396, 
	509, 395, 396, 510, 395, 396, 511, 395, 
	512, 0, 513, 0, 514, 0, 515, 0, 
	516, 0, 517, 0, 518, 0, 519, 0, 
	520, 0, 521, 0, 522, 0, 523, 0, 
	524, 0, 526, 525, 528, 527, 529, 528, 
	530, 531, 532, 533, 531, 530, 527, 534, 
	535, 536, 534, 537, 538, 539, 540, 541, 
	542, 528, 527, 528, 543, 527, 544, 528, 
	527, 545, 546, 528, 527, 547, 528, 527, 
	538, 528, 527, 548, 528, 527, 534, 528, 
	527, 549, 528, 527, 550, 528, 527, 551, 
	528, 527, 552, 528, 527, 553, 528, 527, 
	554, 528, 527, 555, 528, 527, 556, 528, 
	527, 557, 528, 527, 558, 528, 527, 559, 
	528, 527, 534, 528, 527, 560, 528, 527, 
	561, 528, 527, 562, 528, 527, 563, 528, 
	527, 564, 528, 527, 534, 528, 527, 565, 
	528, 566, 527, 567, 528, 527, 568, 528, 
	527, 569, 528, 527, 570, 528, 527, 571, 
	528, 527, 572, 528, 527, 534, 528, 527, 
	573, 528, 527, 574, 528, 527, 575, 528, 
	527, 576, 528, 527, 577, 528, 527, 578, 
	528, 527, 579, 528, 527, 580, 528, 527, 
	528, 581, 527, 582, 528, 527, 583, 528, 
	527, 584, 528, 527, 534, 528, 527, 585, 
	528, 527, 586, 587, 528, 527, 588, 528, 
	527, 589, 528, 527, 590, 528, 527, 591, 
	528, 527, 592, 528, 527, 593, 528, 527, 
	594, 528, 527, 595, 528, 527, 596, 528, 
	527, 597, 528, 527, 598, 528, 527, 599, 
	528, 527, 600, 528, 527, 601, 528, 527, 
	602, 528, 527, 603, 528, 527, 604, 528, 
	527, 605, 528, 527, 528, 543, 527, 606, 
	528, 527, 607, 528, 527, 608, 528, 527, 
	609, 528, 527, 610, 528, 527, 534, 528, 
	527, 611, 528, 527, 612, 613, 528, 527, 
	614, 528, 527, 615, 528, 527, 616, 528, 
	527, 617, 528, 527, 618, 528, 527, 619, 
	528, 527, 620, 528, 527, 621, 528, 527, 
	622, 528, 527, 623, 528, 527, 624, 528, 
	527, 625, 528, 527, 626, 528, 527, 627, 
	528, 527, 528, 628, 527, 629, 528, 527, 
	630, 528, 527, 631, 528, 527, 632, 528, 
	527, 633, 528, 527, 634, 528, 527, 635, 
	528, 527, 636, 528, 527, 637, 528, 527, 
	599, 528, 527, 638, 528, 527, 639, 528, 
	527, 640, 528, 527, 641, 528, 527, 642, 
	528, 527, 643, 528, 527, 644, 528, 527, 
	645, 528, 527, 646, 528, 527, 647, 528, 
	527, 648, 528, 527, 605, 528, 527, 649, 
	528, 527, 650, 528, 527, 568, 528, 543, 
	527, 651, 652, 528, 527, 653, 528, 527, 
	654, 528, 527, 655, 528, 527, 656, 528, 
	527, 605, 528, 527, 657, 528, 527, 658, 
	528, 527, 659, 528, 527, 660, 528, 527, 
	661, 528, 527, 662, 528, 527, 663, 528, 
	527, 664, 528, 527, 665, 528, 527, 666, 
	528, 527, 667, 528, 527, 668, 528, 527, 
	669, 528, 527, 670, 528, 527, 671, 528, 
	527, 672, 528, 527, 605, 528, 527, 528, 
	673, 527, 528, 674, 527, 528, 675, 527, 
	528, 676, 527, 528, 677, 527, 528, 678, 
	527, 528, 679, 527, 528, 680, 527, 528, 
	681, 527, 528, 682, 527, 528, 683, 527, 
	528, 684, 527, 528, 685, 527, 528, 686, 
	527, 687, 0, 688, 0, 164, 21, 0, 
	689, 690, 0, 691, 0, 692, 0, 693, 
	0, 694, 0, 695, 0, 696, 0, 698, 
	697, 700, 699, 701, 700, 702, 703, 704, 
	703, 702, 699, 705, 706, 707, 708, 700, 
	699, 709, 700, 699, 710, 700, 699, 711, 
	700, 699, 712, 700, 699, 713, 700, 699, 
	714, 700, 699, 715, 700, 699, 716, 700, 
	699, 717, 700, 699, 718, 700, 699, 719, 
	700, 699, 720, 700, 699, 721, 700, 699, 
	722, 700, 699, 700, 723, 699, 724, 700, 
	699, 725, 700, 699, 726, 700, 699, 727, 
	700, 699, 728, 700, 699, 729, 700, 699, 
	730, 700, 699, 731, 700, 699, 732, 700, 
	699, 733, 700, 699, 734, 700, 699, 735, 
	700, 699, 736, 700, 699, 737, 700, 699, 
	738, 700, 699, 718, 700, 699, 739, 700, 
	699, 740, 741, 700, 699, 742, 700, 699, 
	743, 700, 699, 744, 700, 699, 745, 700, 
	699, 746, 700, 699, 747, 700, 699, 748, 
	700, 699, 749, 700, 699, 750, 700, 699, 
	751, 700, 699, 752, 700, 699, 753, 700, 
	699, 754, 700, 699, 755, 700, 699, 700, 
	756, 699, 757, 700, 699, 758, 700, 699, 
	759, 700, 699, 760, 700, 699, 761, 700, 
	699, 762, 700, 699, 763, 700, 699, 764, 
	700, 699, 765, 700, 699, 737, 700, 699, 
	766, 700, 699, 767, 700, 699, 768, 700, 
	699, 769, 700, 699, 770, 700, 699, 771, 
	700, 699, 772, 700, 699, 773, 700, 699, 
	774, 700, 699, 775, 700, 699, 776, 700, 
	699, 722, 700, 699, 777, 778, 700, 699, 
	779, 700, 699, 780, 700, 699, 781, 700, 
	699, 782, 700, 699, 722, 700, 699, 783, 
	700, 699, 784, 700, 699, 785, 700, 699, 
	786, 700, 699, 787, 700, 699, 788, 700, 
	699, 789, 700, 699, 790, 700, 699, 791, 
	700, 699, 792, 700, 699, 793, 700, 699, 
	794, 700, 699, 795, 700, 699, 796, 700, 
	699, 797, 700, 699, 798, 700, 699, 722, 
	700, 699, 700, 799, 699, 700, 800, 699, 
	700, 801, 699, 700, 802, 699, 700, 803, 
	699, 700, 804, 699, 700, 805, 699, 700, 
	806, 699, 700, 807, 699, 700, 808, 699, 
	700, 809, 699, 700, 810, 699, 700, 811, 
	699, 700, 812, 699, 813, 0, 814, 0, 
	815, 0, 816, 0, 817, 0, 818, 0, 
	819, 0, 820, 0, 821, 0, 822, 0, 
	823, 0, 824, 0, 825, 0, 826, 0, 
	827, 0, 828, 0, 695, 0, 829, 0, 
	2, 0, 830, 0
];

const _lexer_trans_targs = [
	0, 2, 6, 6, 7, 16, 18, 3, 
	32, 35, 755, 3, 41, 59, 65, 109, 
	45, 130, 301, 617, 620, 4, 5, 5, 
	6, 17, 8, 9, 10, 11, 11, 11, 
	12, 11, 11, 11, 12, 13, 14, 15, 
	6, 15, 16, 6, 17, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	30, 31, 757, 33, 34, 6, 33, 32, 
	34, 35, 36, 37, 39, 40, 38, 36, 
	37, 38, 36, 39, 2, 40, 7, 16, 
	18, 3, 32, 35, 42, 43, 47, 44, 
	46, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 58, 60, 61, 62, 63, 
	64, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 81, 82, 83, 82, 6, 84, 
	85, 92, 86, 87, 88, 89, 90, 91, 
	2, 6, 6, 7, 16, 18, 3, 32, 
	35, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	108, 110, 117, 111, 112, 113, 114, 115, 
	116, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 131, 132, 295, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 153, 152, 153, 154, 
	153, 6, 281, 155, 155, 156, 174, 180, 
	160, 201, 209, 255, 258, 91, 157, 158, 
	162, 159, 161, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 175, 176, 
	177, 178, 179, 181, 188, 182, 183, 184, 
	185, 186, 187, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 202, 
	203, 204, 205, 206, 207, 208, 210, 211, 
	243, 212, 213, 214, 215, 216, 217, 218, 
	219, 220, 221, 222, 223, 224, 225, 226, 
	227, 228, 229, 230, 231, 232, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	244, 245, 246, 247, 248, 249, 250, 251, 
	252, 253, 254, 256, 257, 259, 264, 260, 
	261, 262, 263, 265, 266, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 279, 280, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	6, 296, 297, 298, 299, 300, 302, 303, 
	448, 304, 305, 306, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 317, 318, 
	319, 320, 321, 322, 323, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 337, 336, 337, 338, 337, 6, 
	434, 339, 339, 340, 358, 364, 344, 385, 
	393, 408, 411, 91, 341, 342, 346, 343, 
	345, 347, 348, 349, 350, 351, 352, 353, 
	354, 355, 356, 357, 359, 360, 361, 362, 
	363, 365, 372, 366, 367, 368, 369, 370, 
	371, 373, 374, 375, 376, 377, 378, 379, 
	380, 381, 382, 383, 384, 386, 387, 388, 
	389, 390, 391, 392, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 403, 404, 405, 
	406, 407, 409, 410, 412, 417, 413, 414, 
	415, 416, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 435, 436, 437, 438, 439, 440, 
	441, 442, 443, 444, 445, 446, 447, 6, 
	449, 450, 451, 452, 453, 454, 455, 456, 
	457, 458, 459, 460, 461, 462, 463, 462, 
	463, 464, 463, 6, 603, 465, 465, 466, 
	484, 490, 470, 511, 538, 577, 580, 91, 
	467, 468, 472, 469, 471, 473, 474, 475, 
	476, 477, 478, 479, 480, 481, 482, 483, 
	485, 486, 487, 488, 489, 491, 498, 492, 
	493, 494, 495, 496, 497, 499, 500, 501, 
	502, 503, 504, 505, 506, 507, 508, 509, 
	510, 512, 513, 532, 514, 515, 516, 517, 
	518, 519, 520, 521, 522, 523, 524, 525, 
	526, 527, 528, 529, 530, 531, 533, 534, 
	535, 536, 537, 539, 540, 565, 541, 542, 
	543, 544, 545, 546, 547, 548, 549, 550, 
	551, 552, 553, 554, 555, 556, 557, 558, 
	559, 560, 561, 562, 563, 564, 566, 567, 
	568, 569, 570, 571, 572, 573, 574, 575, 
	576, 578, 579, 581, 586, 582, 583, 584, 
	585, 587, 588, 589, 590, 591, 592, 593, 
	594, 595, 596, 597, 598, 599, 600, 601, 
	602, 604, 605, 606, 607, 608, 609, 610, 
	611, 612, 613, 614, 615, 616, 6, 618, 
	619, 621, 738, 622, 623, 624, 625, 626, 
	627, 628, 629, 628, 629, 630, 629, 6, 
	724, 631, 646, 662, 701, 632, 633, 634, 
	635, 636, 637, 638, 639, 640, 641, 642, 
	643, 644, 645, 91, 647, 648, 649, 650, 
	651, 652, 653, 654, 655, 656, 657, 658, 
	659, 660, 661, 663, 664, 689, 665, 666, 
	667, 668, 669, 670, 671, 672, 673, 674, 
	675, 676, 677, 678, 679, 680, 681, 682, 
	683, 684, 685, 686, 687, 688, 690, 691, 
	692, 693, 694, 695, 696, 697, 698, 699, 
	700, 702, 707, 703, 704, 705, 706, 708, 
	709, 710, 711, 712, 713, 714, 715, 716, 
	717, 718, 719, 720, 721, 722, 723, 725, 
	726, 727, 728, 729, 730, 731, 732, 733, 
	734, 735, 736, 737, 6, 739, 740, 741, 
	742, 743, 744, 745, 746, 747, 748, 749, 
	750, 751, 752, 753, 754, 756, 0
];

const _lexer_trans_actions = [
	39, 25, 0, 47, 3, 1, 0, 25, 
	1, 31, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 0, 
	99, 19, 0, 0, 47, 5, 41, 119, 
	41, 0, 29, 111, 29, 29, 0, 7, 
	95, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 107, 23, 44, 
	0, 0, 0, 33, 33, 47, 33, 80, 
	0, 0, 35, 0, 89, 0, 86, 83, 
	37, 89, 83, 92, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 77, 0, 74, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	56, 27, 115, 53, 50, 27, 56, 50, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 77, 
	0, 65, 29, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 77, 0, 71, 
	29, 77, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 68, 29, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 77, 0, 62, 
	29, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 757;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 110 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

/* line 112 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

var Lexer = function(listeners) {
  // check that we have an 'on' method (for registering event listeners - Node has that)
  // If not, make a trivial implementation that can register one listener. -Enough for testing.
  
  if(!this.on) {
    this._listeners = {};
    
    this.on = function(event, cb) {
      this._listeners[event] = cb;
    };
    
    this.emit = function() {
      var event = arguments[0];
      var args = [];
      for(var i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      var cb = this._listeners[event];
      cb.apply(listeners, args);
    };
  }
  
  var events = ['feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'end'];
  for(e in events) {
    var event = events[e];
    var listener = listeners[event];
//    if(!listener) {
//      throw "No listener for " + event;
//    }
    this.on(event, listener);
  }

  
/* line 1254 "js/lib/gherkin/lexer/i18n/ru.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 146 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */
};

if(typeof require == 'function') {
  require('sys').inherits(Lexer, require('events').EventEmitter);
}

Lexer.prototype.scan = function(data) {
  var p = 0;
  var pe = data.length;
  var eof = 0;

  
/* line 1272 "js/lib/gherkin/lexer/i18n/ru.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*\Z/, '') // TODO .replace(/\"\"\"/mg, '"""')
    );
    this.emit('py_string', con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.emit('step', this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    console.log('TODO: store_comment_content');
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    console.log('TODO: store_tag_content');
  		break;
case 12:
/* line 62 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 89 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 98 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    this.emit('row', current_row, this.current_line);
  		break;
case 21:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    console.log('TODO: end_feature');
  		break;
/* line 1478 "js/lib/gherkin/lexer/i18n/ru.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */

    console.log('TODO: end_feature');
  		break;
/* line 1511 "js/lib/gherkin/lexer/i18n/ru.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 158 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ru.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
}

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.emit(event, this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

exports.Lexer = Lexer;

})();