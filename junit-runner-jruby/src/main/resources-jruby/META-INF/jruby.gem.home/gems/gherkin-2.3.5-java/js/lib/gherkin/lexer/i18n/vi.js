
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
;(function() {


/* line 107 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/i18n/vi.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 41, 46, 
	51, 56, 61, 66, 70, 74, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	95, 100, 107, 112, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 141, 143, 145, 147, 149, 151, 
	153, 155, 157, 159, 161, 163, 165, 167, 
	169, 171, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 210, 212, 214, 216, 218, 220, 
	222, 224, 226, 228, 230, 232, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 261, 263, 265, 267, 
	269, 271, 273, 275, 277, 279, 281, 283, 
	285, 287, 289, 291, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 328, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 354, 356, 358, 360, 363, 365, 367, 
	369, 371, 373, 375, 377, 379, 381, 383, 
	385, 387, 389, 391, 393, 395, 397, 399, 
	402, 405, 407, 409, 411, 413, 415, 417, 
	419, 421, 423, 425, 427, 428, 429, 430, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	440, 441, 442, 443, 444, 445, 446, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 488, 490, 492, 
	494, 496, 498, 500, 502, 504, 507, 509, 
	511, 513, 515, 517, 519, 521, 523, 525, 
	527, 529, 531, 533, 535, 537, 539, 541, 
	544, 547, 549, 551, 553, 555, 557, 559, 
	561, 563, 565, 567, 569, 571, 573, 575, 
	577, 579, 581, 583, 585, 587, 588, 589, 
	590, 591, 592, 593, 594, 595, 596, 597, 
	598, 599, 600, 601, 602, 603, 604, 606, 
	608, 609, 610, 611, 612, 613, 614, 615, 
	616, 617, 618, 619, 620, 621, 622, 623, 
	624, 625, 626, 627, 628, 629, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 715, 717, 719, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 743, 746, 748, 750, 752, 754, 756, 
	758, 760, 762, 764, 766, 768, 770, 772, 
	774, 777, 779, 781, 783, 785, 787, 789, 
	790, 791, 792, 793, 797, 803, 806, 808, 
	814, 831, 833, 835, 837, 839, 841, 843, 
	845, 848, 850, 852, 854, 856, 858, 860, 
	862, 864, 866, 868, 870, 873, 875, 877, 
	879, 882, 884, 886, 888, 890, 892, 894, 
	896, 898, 900, 902, 904, 906, 908, 910, 
	912, 914, 916, 918, 921, 924, 926, 928, 
	930, 932, 934, 936, 938, 940, 942, 944, 
	945, 946, 947, 948, 949, 950
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	67, 68, 75, 78, 84, 86, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 66, 67, 68, 75, 78, 84, 86, 
	124, 9, 13, 34, 34, 10, 32, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 32, 10, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	-31, 105, -69, -111, 105, 32, 99, -31, 
	-70, -93, 110, 104, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 66, 67, 75, 
	78, 84, 86, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 66, 67, 68, 75, 78, 84, 
	86, 124, 9, 13, 104, 111, -31, -69, 
	-81, 32, 108, 105, -31, -69, -121, 117, 
	58, 10, 10, 10, 32, 35, 84, 124, 
	9, 13, -61, 10, -83, 10, 10, 110, 
	10, 104, 10, 32, 10, 110, -60, 10, 
	-125, 10, 10, 110, 10, 103, 10, 58, 
	-31, 104, -69, -117, 99, 104, 32, 98, 
	-31, -70, -93, 110, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 66, 67, 75, 
	78, 84, 86, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, -31, 10, 105, -69, 10, 
	-111, 10, 10, 105, 10, 32, 10, 99, 
	-31, 10, -70, 10, -93, 10, 10, 110, 
	10, 104, 10, 58, -31, 10, -70, 10, 
	-65, 10, 10, 116, 10, 104, 10, 111, 
	-31, 10, 104, -69, 10, -117, 10, 10, 
	99, 10, 104, 10, 32, 10, 98, -31, 
	10, -70, 10, -93, 10, 10, 110, 10, 
	105, 117, 10, 110, 10, 103, 10, 32, 
	10, 107, 116, -31, 10, -61, 10, -84, 
	10, 10, 110, 10, 104, 10, 32, 10, 
	104, 10, 117, -31, 10, -69, 10, -111, 
	10, 10, 110, 10, 103, 10, 104, -58, 
	10, -80, 10, 10, 110, 10, 103, -61, 
	10, 104, -84, -83, 10, 10, 110, 10, 
	104, 10, 32, 10, 110, -60, 10, -125, 
	10, -61, 10, -84, 10, -61, 10, -96, 
	10, 105, 117, 110, 103, 32, 107, 116, 
	-31, -69, -117, 99, 104, 32, 98, -31, 
	-70, -93, 110, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 66, 67, 75, 78, 
	84, 86, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 105, -31, 10, -70, 10, 
	-65, 10, 10, 116, 10, 104, 10, 111, 
	-31, 10, 104, -69, 10, -117, 10, 10, 
	99, 10, 104, 10, 32, 10, 98, -31, 
	10, -70, 10, -93, 10, 10, 110, 10, 
	58, 10, 105, 10, 104, -58, 10, -80, 
	10, 10, 110, 10, 103, -61, 10, 104, 
	-84, -83, 10, 10, 110, 10, 104, 10, 
	32, 10, 104, 10, 117, -31, 10, -69, 
	10, -111, 10, 10, 110, 10, 103, 10, 
	110, 10, 104, 10, 32, 10, 110, -60, 
	10, -125, 10, -61, 10, -84, 10, -61, 
	10, -96, 10, -61, -84, 110, 104, 32, 
	104, 117, -31, -69, -111, 110, 103, 104, 
	-58, -80, 110, 103, -61, 104, -84, -83, 
	110, 104, 32, 104, 117, -31, -69, -111, 
	110, 103, 110, 104, 32, 110, -60, -125, 
	110, 103, 58, 10, 10, 10, 32, 35, 
	37, 64, 66, 68, 75, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -31, 10, -69, 10, 
	-111, 10, 10, 105, 10, 32, 10, 99, 
	-31, 10, -70, 10, -93, 10, 10, 110, 
	10, 104, 10, 58, -31, 10, -69, 10, 
	-81, 10, 10, 32, 10, 108, 10, 105, 
	-31, 10, -69, 10, -121, 10, 10, 117, 
	-31, 10, 104, -69, 10, -117, 10, 10, 
	99, 10, 104, 10, 32, 10, 98, -31, 
	10, -70, 10, -93, 10, 10, 110, 10, 
	117, 10, 110, 10, 103, 10, 32, 10, 
	107, 116, -31, 10, -61, 10, -84, 10, 
	10, 110, 10, 104, 10, 32, 10, 104, 
	10, 117, -31, 10, -69, 10, -111, 10, 
	10, 110, 10, 103, -61, 10, -84, -83, 
	10, 10, 110, 10, 104, 10, 32, 10, 
	110, -60, 10, -125, 10, -61, -84, -61, 
	-96, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 66, 67, 68, 
	75, 78, 84, 86, 124, 9, 13, 10, 
	105, -31, 10, -70, 10, -65, 10, 10, 
	116, 10, 104, 10, 111, -31, 10, 104, 
	-69, 10, -117, 10, 10, 99, 10, 104, 
	10, 32, 10, 98, -31, 10, -70, 10, 
	-93, 10, 10, 110, 10, 58, 10, 105, 
	117, 10, 110, 10, 103, 10, 32, 10, 
	107, 116, -31, 10, -61, 10, -84, 10, 
	10, 110, 10, 104, 10, 32, 10, 104, 
	10, 117, -31, 10, -69, 10, -111, 10, 
	10, 110, 10, 103, 10, 104, -58, 10, 
	-80, 10, 10, 110, 10, 103, -61, 10, 
	104, -84, -83, 10, 10, 110, 10, 104, 
	10, 32, 10, 110, -60, 10, -125, 10, 
	-61, 10, -84, 10, -61, 10, -96, 10, 
	-31, -70, -65, 116, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 3, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 15, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 43, 48, 
	53, 58, 63, 68, 72, 76, 79, 81, 
	83, 85, 87, 89, 91, 93, 95, 97, 
	99, 101, 103, 105, 107, 109, 111, 113, 
	116, 121, 128, 133, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 176, 179, 182, 185, 188, 191, 
	194, 197, 200, 203, 206, 209, 212, 215, 
	218, 221, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 275, 278, 281, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 351, 354, 357, 360, 
	363, 366, 369, 372, 375, 378, 381, 384, 
	387, 390, 393, 396, 400, 403, 406, 409, 
	412, 415, 418, 421, 424, 427, 430, 433, 
	436, 439, 442, 445, 448, 451, 455, 458, 
	461, 464, 467, 470, 473, 476, 479, 482, 
	485, 489, 492, 495, 498, 502, 505, 508, 
	511, 514, 517, 520, 523, 526, 529, 532, 
	535, 538, 541, 544, 547, 550, 553, 556, 
	560, 564, 567, 570, 573, 576, 579, 582, 
	585, 588, 591, 594, 597, 599, 601, 603, 
	606, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 632, 634, 648, 
	651, 654, 657, 660, 663, 666, 669, 672, 
	675, 678, 681, 684, 687, 690, 693, 696, 
	699, 702, 705, 708, 711, 714, 718, 721, 
	724, 727, 730, 733, 736, 739, 742, 745, 
	748, 751, 754, 757, 760, 763, 766, 769, 
	773, 777, 780, 783, 786, 789, 792, 795, 
	798, 801, 804, 807, 810, 813, 816, 819, 
	822, 825, 828, 831, 834, 837, 839, 841, 
	843, 845, 847, 849, 851, 853, 855, 857, 
	859, 861, 863, 865, 867, 869, 871, 874, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 903, 905, 907, 
	909, 911, 913, 915, 917, 919, 930, 933, 
	936, 939, 942, 945, 948, 951, 954, 957, 
	960, 963, 966, 969, 972, 975, 978, 981, 
	984, 987, 990, 993, 996, 999, 1002, 1005, 
	1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1038, 1042, 1045, 1048, 1051, 1054, 
	1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 
	1081, 1084, 1088, 1091, 1094, 1097, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 
	1130, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 
	1154, 1156, 1158, 1160, 1164, 1170, 1174, 1177, 
	1183, 1200, 1203, 1206, 1209, 1212, 1215, 1218, 
	1221, 1225, 1228, 1231, 1234, 1237, 1240, 1243, 
	1246, 1249, 1252, 1255, 1258, 1262, 1265, 1268, 
	1271, 1275, 1278, 1281, 1284, 1287, 1290, 1293, 
	1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 
	1320, 1323, 1326, 1329, 1333, 1337, 1340, 1343, 
	1346, 1349, 1352, 1355, 1358, 1361, 1364, 1367, 
	1369, 1371, 1373, 1375, 1377, 1379
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 19, 
	18, 18, 0, 22, 21, 23, 21, 20, 
	26, 25, 27, 25, 24, 26, 25, 28, 
	25, 24, 26, 25, 29, 25, 24, 31, 
	30, 32, 30, 0, 2, 33, 33, 0, 
	31, 30, 30, 0, 35, 36, 34, 2, 
	0, 37, 0, 38, 0, 39, 0, 40, 
	0, 41, 0, 42, 0, 43, 0, 44, 
	0, 45, 0, 46, 0, 47, 0, 48, 
	0, 49, 0, 50, 0, 51, 0, 0, 
	52, 54, 55, 53, 0, 0, 0, 0, 
	56, 57, 58, 57, 57, 60, 59, 56, 
	2, 61, 7, 61, 0, 62, 63, 0, 
	64, 0, 65, 0, 66, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 71, 0, 
	72, 0, 73, 0, 74, 0, 76, 75, 
	78, 77, 78, 79, 80, 81, 82, 80, 
	83, 84, 85, 86, 87, 88, 79, 77, 
	78, 89, 77, 78, 90, 77, 78, 91, 
	77, 78, 92, 77, 78, 93, 77, 78, 
	94, 77, 78, 95, 77, 78, 96, 77, 
	78, 97, 77, 78, 98, 77, 78, 99, 
	77, 78, 100, 77, 78, 101, 77, 78, 
	102, 77, 78, 103, 77, 105, 104, 106, 
	107, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 104, 0, 119, 0, 
	120, 0, 121, 0, 122, 0, 123, 0, 
	124, 0, 125, 0, 126, 0, 127, 0, 
	128, 0, 129, 0, 130, 0, 131, 0, 
	133, 132, 135, 134, 135, 136, 137, 138, 
	137, 136, 134, 139, 135, 134, 140, 135, 
	134, 135, 141, 134, 135, 142, 134, 135, 
	143, 134, 135, 144, 134, 145, 135, 134, 
	146, 135, 134, 135, 147, 134, 135, 148, 
	134, 135, 149, 134, 150, 151, 0, 152, 
	0, 153, 0, 154, 0, 155, 0, 156, 
	0, 157, 0, 158, 0, 159, 0, 160, 
	0, 161, 0, 162, 0, 164, 163, 166, 
	165, 166, 167, 168, 169, 170, 168, 171, 
	172, 173, 174, 175, 176, 167, 165, 166, 
	177, 165, 166, 178, 165, 166, 179, 165, 
	166, 180, 165, 166, 181, 165, 166, 182, 
	165, 166, 183, 165, 166, 184, 165, 166, 
	185, 165, 166, 186, 165, 166, 187, 165, 
	166, 188, 165, 166, 189, 165, 166, 190, 
	165, 166, 191, 165, 192, 166, 193, 165, 
	194, 166, 165, 195, 166, 165, 166, 196, 
	165, 166, 197, 165, 166, 198, 165, 199, 
	166, 165, 200, 166, 165, 201, 166, 165, 
	166, 202, 165, 166, 203, 165, 166, 191, 
	165, 204, 166, 165, 205, 166, 165, 206, 
	166, 165, 166, 207, 165, 166, 208, 165, 
	166, 207, 165, 209, 166, 210, 165, 211, 
	166, 165, 212, 166, 165, 166, 213, 165, 
	166, 214, 165, 166, 215, 165, 166, 216, 
	165, 217, 166, 165, 218, 166, 165, 219, 
	166, 165, 166, 203, 165, 166, 207, 220, 
	165, 166, 221, 165, 166, 222, 165, 166, 
	223, 165, 166, 224, 225, 165, 209, 166, 
	165, 226, 166, 165, 227, 166, 165, 166, 
	228, 165, 166, 229, 165, 166, 230, 165, 
	166, 231, 165, 166, 232, 165, 233, 166, 
	165, 234, 166, 165, 235, 166, 165, 166, 
	236, 165, 166, 203, 165, 166, 237, 165, 
	238, 166, 165, 239, 166, 165, 166, 240, 
	165, 166, 207, 165, 241, 166, 242, 165, 
	227, 243, 166, 165, 166, 244, 165, 166, 
	245, 165, 166, 246, 165, 166, 247, 165, 
	248, 166, 165, 235, 166, 165, 249, 166, 
	165, 207, 166, 165, 250, 166, 165, 207, 
	166, 165, 120, 251, 0, 252, 0, 253, 
	0, 254, 0, 255, 256, 0, 257, 0, 
	258, 0, 259, 0, 260, 0, 261, 0, 
	262, 0, 263, 0, 264, 0, 265, 0, 
	266, 0, 267, 0, 268, 0, 270, 269, 
	272, 271, 272, 273, 274, 275, 276, 274, 
	277, 278, 279, 280, 281, 282, 273, 271, 
	272, 283, 271, 272, 284, 271, 272, 285, 
	271, 272, 286, 271, 272, 287, 271, 272, 
	288, 271, 272, 289, 271, 272, 290, 271, 
	272, 291, 271, 272, 292, 271, 272, 293, 
	271, 272, 294, 271, 272, 295, 271, 272, 
	296, 271, 272, 297, 271, 272, 298, 271, 
	299, 272, 271, 300, 272, 271, 301, 272, 
	271, 272, 302, 271, 272, 303, 271, 272, 
	302, 271, 304, 272, 305, 271, 306, 272, 
	271, 307, 272, 271, 272, 308, 271, 272, 
	309, 271, 272, 310, 271, 272, 311, 271, 
	312, 272, 271, 313, 272, 271, 314, 272, 
	271, 272, 315, 271, 272, 297, 271, 272, 
	302, 271, 272, 316, 271, 317, 272, 271, 
	318, 272, 271, 272, 319, 271, 272, 302, 
	271, 320, 272, 321, 271, 322, 323, 272, 
	271, 272, 324, 271, 272, 325, 271, 272, 
	326, 271, 272, 327, 271, 272, 328, 271, 
	329, 272, 271, 330, 272, 271, 331, 272, 
	271, 272, 332, 271, 272, 315, 271, 272, 
	333, 271, 272, 334, 271, 272, 335, 271, 
	272, 336, 271, 337, 272, 271, 331, 272, 
	271, 338, 272, 271, 302, 272, 271, 339, 
	272, 271, 302, 272, 271, 340, 0, 341, 
	0, 342, 0, 343, 0, 344, 0, 345, 
	0, 346, 0, 347, 0, 348, 0, 349, 
	0, 350, 0, 267, 0, 351, 0, 352, 
	0, 353, 0, 354, 0, 120, 0, 355, 
	356, 0, 357, 358, 0, 359, 0, 360, 
	0, 361, 0, 362, 0, 363, 0, 364, 
	0, 365, 0, 366, 0, 367, 0, 161, 
	0, 368, 0, 369, 0, 370, 0, 371, 
	0, 372, 0, 373, 0, 374, 0, 375, 
	0, 376, 0, 378, 377, 380, 379, 380, 
	381, 382, 383, 382, 384, 385, 386, 387, 
	381, 379, 380, 388, 379, 380, 389, 379, 
	380, 390, 379, 380, 391, 379, 380, 392, 
	379, 380, 393, 379, 380, 394, 379, 380, 
	395, 379, 380, 396, 379, 380, 397, 379, 
	380, 398, 379, 380, 399, 379, 380, 400, 
	379, 380, 401, 379, 402, 380, 379, 403, 
	380, 379, 404, 380, 379, 380, 405, 379, 
	380, 406, 379, 380, 407, 379, 408, 380, 
	379, 409, 380, 379, 410, 380, 379, 380, 
	411, 379, 380, 412, 379, 380, 413, 379, 
	414, 380, 379, 415, 380, 379, 416, 380, 
	379, 380, 417, 379, 380, 418, 379, 380, 
	419, 379, 420, 380, 379, 421, 380, 379, 
	422, 380, 379, 380, 412, 379, 423, 380, 
	424, 379, 425, 380, 379, 426, 380, 379, 
	380, 427, 379, 380, 428, 379, 380, 429, 
	379, 380, 430, 379, 431, 380, 379, 432, 
	380, 379, 433, 380, 379, 380, 412, 379, 
	380, 434, 379, 380, 435, 379, 380, 436, 
	379, 380, 437, 379, 380, 438, 439, 379, 
	423, 380, 379, 440, 380, 379, 441, 380, 
	379, 380, 442, 379, 380, 443, 379, 380, 
	444, 379, 380, 445, 379, 380, 446, 379, 
	447, 380, 379, 448, 380, 379, 449, 380, 
	379, 380, 450, 379, 380, 412, 379, 451, 
	380, 379, 441, 452, 380, 379, 380, 453, 
	379, 380, 454, 379, 380, 455, 379, 380, 
	456, 379, 457, 380, 379, 449, 380, 379, 
	458, 0, 120, 0, 459, 0, 120, 0, 
	460, 461, 460, 0, 464, 463, 465, 466, 
	463, 462, 0, 468, 469, 467, 0, 468, 
	467, 464, 470, 468, 469, 470, 467, 464, 
	471, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 481, 482, 483, 484, 471, 0, 
	78, 485, 77, 486, 78, 77, 487, 78, 
	77, 488, 78, 77, 78, 489, 77, 78, 
	490, 77, 78, 489, 77, 491, 78, 492, 
	77, 493, 78, 77, 494, 78, 77, 78, 
	495, 77, 78, 496, 77, 78, 497, 77, 
	78, 498, 77, 499, 78, 77, 500, 78, 
	77, 501, 78, 77, 78, 502, 77, 78, 
	103, 77, 78, 489, 503, 77, 78, 504, 
	77, 78, 505, 77, 78, 506, 77, 78, 
	507, 508, 77, 491, 78, 77, 509, 78, 
	77, 510, 78, 77, 78, 511, 77, 78, 
	512, 77, 78, 513, 77, 78, 514, 77, 
	78, 515, 77, 516, 78, 77, 517, 78, 
	77, 518, 78, 77, 78, 519, 77, 78, 
	502, 77, 78, 520, 77, 521, 78, 77, 
	522, 78, 77, 78, 523, 77, 78, 489, 
	77, 524, 78, 525, 77, 510, 526, 78, 
	77, 78, 527, 77, 78, 528, 77, 78, 
	529, 77, 78, 530, 77, 531, 78, 77, 
	518, 78, 77, 532, 78, 77, 489, 78, 
	77, 533, 78, 77, 489, 78, 77, 534, 
	0, 535, 0, 536, 0, 120, 0, 537, 
	0, 1, 0, 538, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 68, 93, 281, 286, 385, 387, 
	451, 4, 5, 6, 7, 7, 7, 8, 
	7, 7, 7, 8, 9, 10, 11, 2, 
	12, 11, 13, 2, 14, 16, 17, 18, 
	19, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 453, 30, 31, 31, 2, 14, 
	33, 34, 2, 33, 32, 34, 36, 447, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 48, 49, 49, 
	2, 50, 64, 393, 398, 400, 430, 435, 
	445, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 2, 65, 
	2, 2, 3, 13, 15, 29, 32, 35, 
	66, 68, 93, 281, 286, 385, 387, 67, 
	29, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 80, 81, 
	81, 2, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 92, 65, 94, 187, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 106, 107, 107, 
	2, 108, 122, 123, 139, 141, 170, 175, 
	185, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 2, 65, 
	124, 135, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 136, 137, 138, 122, 
	140, 142, 152, 143, 144, 145, 146, 147, 
	148, 149, 150, 151, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 171, 172, 173, 
	174, 176, 183, 177, 178, 179, 180, 181, 
	182, 184, 186, 188, 189, 190, 191, 192, 
	269, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 205, 206, 205, 
	206, 206, 2, 207, 221, 222, 227, 229, 
	242, 247, 267, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	2, 65, 223, 224, 225, 226, 221, 228, 
	230, 241, 231, 232, 233, 234, 235, 236, 
	237, 238, 239, 240, 243, 244, 245, 246, 
	248, 265, 249, 259, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 260, 261, 262, 
	263, 264, 266, 268, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 280, 282, 
	283, 284, 285, 287, 383, 288, 298, 289, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	299, 300, 301, 302, 303, 304, 305, 306, 
	307, 308, 309, 308, 309, 309, 2, 310, 
	324, 336, 346, 375, 311, 312, 313, 314, 
	315, 316, 317, 318, 319, 320, 321, 322, 
	323, 2, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 334, 335, 65, 337, 338, 
	339, 340, 341, 342, 343, 344, 345, 347, 
	357, 348, 349, 350, 351, 352, 353, 354, 
	355, 356, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 368, 369, 370, 371, 
	372, 373, 374, 376, 377, 378, 379, 380, 
	381, 382, 384, 386, 387, 388, 389, 391, 
	392, 390, 388, 389, 390, 388, 391, 392, 
	3, 13, 15, 29, 32, 35, 66, 68, 
	93, 281, 286, 385, 387, 394, 395, 396, 
	397, 64, 399, 401, 412, 402, 403, 404, 
	405, 406, 407, 408, 409, 410, 411, 413, 
	414, 415, 416, 417, 418, 419, 420, 421, 
	422, 423, 424, 425, 426, 427, 428, 429, 
	431, 432, 433, 434, 436, 443, 437, 438, 
	439, 440, 441, 442, 444, 446, 448, 449, 
	450, 452, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 31, 
	0, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 99, 19, 
	0, 23, 107, 23, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 0, 
	65, 29, 77, 77, 77, 77, 77, 77, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 11, 
	27, 115, 53, 50, 27, 56, 50, 56, 
	56, 56, 56, 56, 56, 56, 59, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 74, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 0, 
	68, 29, 77, 77, 77, 77, 77, 77, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 71, 29, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 62, 29, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 33, 
	47, 33, 80, 0, 0, 35, 0, 0, 
	86, 83, 37, 89, 83, 89, 89, 89, 
	89, 89, 89, 89, 92, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 453;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 110 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

/* line 112 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

var Lexer = function(listeners) {
  // check that we have an 'on' method (for registering event listeners - Node has that)
  // If not, make a trivial implementation that can register one listener. -Enough for testing.
  
  if(!this.on) {
    this._listeners = {};
    
    this.on = function(event, cb) {
      this._listeners[event] = cb;
    };
    
    this.emit = function() {
      var event = arguments[0];
      var args = [];
      for(var i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      var cb = this._listeners[event];
      cb.apply(listeners, args);
    };
  }
  
  var events = ['feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'end'];
  for(e in events) {
    var event = events[e];
    var listener = listeners[event];
//    if(!listener) {
//      throw "No listener for " + event;
//    }
    this.on(event, listener);
  }

  
/* line 818 "js/lib/gherkin/lexer/i18n/vi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 146 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
};

if(typeof require == 'function') {
  require('sys').inherits(Lexer, require('events').EventEmitter);
}

Lexer.prototype.scan = function(data) {
  var p = 0;
  var pe = data.length;
  var eof = 0;

  
/* line 836 "js/lib/gherkin/lexer/i18n/vi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*\Z/, '') // TODO .replace(/\"\"\"/mg, '"""')
    );
    this.emit('py_string', con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.emit('step', this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    console.log('TODO: store_comment_content');
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    console.log('TODO: store_tag_content');
  		break;
case 12:
/* line 62 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 89 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 98 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.emit('row', current_row, this.current_line);
  		break;
case 21:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    console.log('TODO: end_feature');
  		break;
/* line 1042 "js/lib/gherkin/lexer/i18n/vi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    console.log('TODO: end_feature');
  		break;
/* line 1075 "js/lib/gherkin/lexer/i18n/vi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 158 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
}

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.emit(event, this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

exports.Lexer = Lexer;

})();